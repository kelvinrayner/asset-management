// <auto-generated />
using System;
using Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20191224164838_AddEmployeeAccountModel")]
    partial class AddEmployeeAccountModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Data.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Create_Date");

                    b.Property<DateTime?>("Delete_Date");

                    b.Property<string>("Email");

                    b.Property<int?>("EmployeeId");

                    b.Property<bool>("Is_Deleted");

                    b.Property<string>("Password");

                    b.Property<int?>("RoleId");

                    b.Property<DateTime?>("Update_Date");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("RoleId");

                    b.ToTable("TB_M_Account");
                });

            modelBuilder.Entity("Data.Models.AccountRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Create_Date");

                    b.Property<DateTime?>("Delete_Date");

                    b.Property<bool>("Is_Deleted");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("Update_Date");

                    b.HasKey("Id");

                    b.ToTable("TB_M_Account_Role");
                });

            modelBuilder.Entity("Data.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<DateTime>("Create_Date");

                    b.Property<DateTime?>("Delete_Date");

                    b.Property<string>("Email");

                    b.Property<string>("Handphone_Number");

                    b.Property<bool>("Is_Deleted");

                    b.Property<string>("Name");

                    b.Property<DateTime>("Start_Working");

                    b.Property<DateTime?>("Update_Date");

                    b.HasKey("Id");

                    b.ToTable("TB_M_Employee");
                });

            modelBuilder.Entity("Data.Models.EmployeeDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Create_Date");

                    b.Property<DateTime?>("Delete_Date");

                    b.Property<bool>("Is_Deleted");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("Update_Date");

                    b.HasKey("Id");

                    b.ToTable("TB_M_Employee_Department");
                });

            modelBuilder.Entity("Data.Models.EmployeeDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BodId");

                    b.Property<DateTime>("Create_Date");

                    b.Property<DateTime?>("Delete_Date");

                    b.Property<int?>("DepartmentId");

                    b.Property<int?>("Division_HeadId");

                    b.Property<int?>("EmployeeId");

                    b.Property<bool>("Is_Deleted");

                    b.Property<int?>("ManagerId");

                    b.Property<int?>("PositionId");

                    b.Property<DateTime?>("Update_Date");

                    b.HasKey("Id");

                    b.HasIndex("BodId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("Division_HeadId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("PositionId");

                    b.ToTable("TB_T_Employee_Details");
                });

            modelBuilder.Entity("Data.Models.EmployeePosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Create_Date");

                    b.Property<DateTime?>("Delete_Date");

                    b.Property<bool>("Is_Deleted");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("Update_Date");

                    b.HasKey("Id");

                    b.ToTable("TB_M_Employee_Position");
                });

            modelBuilder.Entity("Data.Models.Account", b =>
                {
                    b.HasOne("Data.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Data.Models.AccountRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("Data.Models.EmployeeDetails", b =>
                {
                    b.HasOne("Data.Models.Employee", "Bod")
                        .WithMany()
                        .HasForeignKey("BodId");

                    b.HasOne("Data.Models.EmployeeDepartment", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Data.Models.Employee", "Division_Head")
                        .WithMany()
                        .HasForeignKey("Division_HeadId");

                    b.HasOne("Data.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Data.Models.Employee", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId");

                    b.HasOne("Data.Models.EmployeePosition", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId");
                });
#pragma warning restore 612, 618
        }
    }
}
