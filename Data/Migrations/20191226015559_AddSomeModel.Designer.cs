// <auto-generated />
using System;
using Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20191226015559_AddSomeModel")]
    partial class AddSomeModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Data.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Create_Date");

                    b.Property<DateTime?>("Delete_Date");

                    b.Property<string>("Email");

                    b.Property<int?>("EmployeeId");

                    b.Property<bool>("Is_Deleted");

                    b.Property<string>("Password");

                    b.Property<int?>("RoleId");

                    b.Property<DateTime?>("Update_Date");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("RoleId");

                    b.ToTable("TB_M_Account");
                });

            modelBuilder.Entity("Data.Models.AccountRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Create_Date");

                    b.Property<DateTime?>("Delete_Date");

                    b.Property<bool>("Is_Deleted");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("Update_Date");

                    b.HasKey("Id");

                    b.ToTable("TB_M_Account_Role");
                });

            modelBuilder.Entity("Data.Models.Asset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Condition");

                    b.Property<DateTime>("Create_Date");

                    b.Property<DateTime?>("Delete_Date");

                    b.Property<bool>("Is_Deleted");

                    b.Property<string>("Name");

                    b.Property<int?>("TypeId");

                    b.Property<DateTime?>("Update_Date");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("TB_M_Asset");
                });

            modelBuilder.Entity("Data.Models.AssetLend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AssetId");

                    b.Property<DateTime>("Create_Date");

                    b.Property<DateTime?>("Delete_Date");

                    b.Property<int?>("EmployeeId");

                    b.Property<DateTime>("End_Date");

                    b.Property<bool>("Is_Deleted");

                    b.Property<DateTime>("Lend_Date");

                    b.Property<int?>("ManagerId");

                    b.Property<string>("Manager_Additional_Info");

                    b.Property<int?>("Manager_StatusId");

                    b.Property<string>("Procurement_Additional_Info");

                    b.Property<int?>("Procurement_StatusId");

                    b.Property<DateTime?>("Update_Date");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("Manager_StatusId");

                    b.HasIndex("Procurement_StatusId");

                    b.ToTable("TB_T_Asset_Lend");
                });

            modelBuilder.Entity("Data.Models.AssetReturn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AssetLendId");

                    b.Property<int>("Charge");

                    b.Property<string>("Condition");

                    b.Property<DateTime>("Create_Date");

                    b.Property<DateTime?>("Delete_Date");

                    b.Property<bool>("Is_Deleted");

                    b.Property<DateTime>("Return_Date");

                    b.Property<DateTime?>("Update_Date");

                    b.HasKey("Id");

                    b.HasIndex("AssetLendId");

                    b.ToTable("TB_T_Asset_Return");
                });

            modelBuilder.Entity("Data.Models.DamageAsset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AssetLendId");

                    b.Property<DateTime>("Create_Date");

                    b.Property<DateTime?>("Delete_Date");

                    b.Property<bool>("Is_Deleted");

                    b.Property<DateTime?>("Update_Date");

                    b.HasKey("Id");

                    b.HasIndex("AssetLendId");

                    b.ToTable("TB_T_Damage_Asset");
                });

            modelBuilder.Entity("Data.Models.DamageClassification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Create_Date");

                    b.Property<int?>("DamageTypeId");

                    b.Property<DateTime?>("Delete_Date");

                    b.Property<bool>("Is_Deleted");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("Update_Date");

                    b.HasKey("Id");

                    b.HasIndex("DamageTypeId");

                    b.ToTable("TB_M_Damage_Classification");
                });

            modelBuilder.Entity("Data.Models.DamageHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Create_Date");

                    b.Property<int?>("DamageAssetId");

                    b.Property<int?>("DamageClassificationId");

                    b.Property<DateTime?>("Delete_Date");

                    b.Property<bool>("Is_Deleted");

                    b.Property<DateTime?>("Update_Date");

                    b.HasKey("Id");

                    b.HasIndex("DamageAssetId");

                    b.HasIndex("DamageClassificationId");

                    b.ToTable("TB_T_Damage_History");
                });

            modelBuilder.Entity("Data.Models.DamageType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Create_Date");

                    b.Property<DateTime?>("Delete_Date");

                    b.Property<bool>("Is_Deleted");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("Update_Date");

                    b.HasKey("Id");

                    b.ToTable("TB_M_Damage_Type");
                });

            modelBuilder.Entity("Data.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<DateTime>("Create_Date");

                    b.Property<DateTime?>("Delete_Date");

                    b.Property<string>("Email");

                    b.Property<string>("Handphone_Number");

                    b.Property<bool>("Is_Deleted");

                    b.Property<string>("Name");

                    b.Property<DateTime>("Start_Working");

                    b.Property<DateTime?>("Update_Date");

                    b.HasKey("Id");

                    b.ToTable("TB_M_Employee");
                });

            modelBuilder.Entity("Data.Models.EmployeeDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Create_Date");

                    b.Property<DateTime?>("Delete_Date");

                    b.Property<bool>("Is_Deleted");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("Update_Date");

                    b.HasKey("Id");

                    b.ToTable("TB_M_Employee_Department");
                });

            modelBuilder.Entity("Data.Models.EmployeeDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BodId");

                    b.Property<DateTime>("Create_Date");

                    b.Property<DateTime?>("Delete_Date");

                    b.Property<int?>("DepartmentId");

                    b.Property<int?>("Division_HeadId");

                    b.Property<int?>("EmployeeId");

                    b.Property<bool>("Is_Deleted");

                    b.Property<int?>("ManagerId");

                    b.Property<int?>("PositionId");

                    b.Property<DateTime?>("Update_Date");

                    b.HasKey("Id");

                    b.HasIndex("BodId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("Division_HeadId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("PositionId");

                    b.ToTable("TB_T_Employee_Details");
                });

            modelBuilder.Entity("Data.Models.EmployeePosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Create_Date");

                    b.Property<DateTime?>("Delete_Date");

                    b.Property<bool>("Is_Deleted");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("Update_Date");

                    b.HasKey("Id");

                    b.ToTable("TB_M_Employee_Position");
                });

            modelBuilder.Entity("Data.Models.NotebookRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BodIdId");

                    b.Property<int?>("Bod_StatusId");

                    b.Property<DateTime>("Create_Date");

                    b.Property<DateTime?>("Delete_Date");

                    b.Property<int?>("Divisio_Head_StatusId");

                    b.Property<int?>("Division_HeadIdId");

                    b.Property<int?>("EmployeeId");

                    b.Property<bool>("Is_Deleted");

                    b.Property<int?>("ManagerId");

                    b.Property<int?>("Manager_StatusId");

                    b.Property<string>("Name");

                    b.Property<int>("Pay_Cash");

                    b.Property<int>("Price");

                    b.Property<string>("Serial_Number");

                    b.Property<DateTime?>("Update_Date");

                    b.HasKey("Id");

                    b.HasIndex("BodIdId");

                    b.HasIndex("Bod_StatusId");

                    b.HasIndex("Divisio_Head_StatusId");

                    b.HasIndex("Division_HeadIdId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("Manager_StatusId");

                    b.ToTable("TB_T_Notebook_Request");
                });

            modelBuilder.Entity("Data.Models.StatusApproval", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Create_Date");

                    b.Property<DateTime?>("Delete_Date");

                    b.Property<bool>("Is_Deleted");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("Update_Date");

                    b.HasKey("Id");

                    b.ToTable("TB_M_Status_Approval");
                });

            modelBuilder.Entity("Data.Models.TypeAsset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Create_Date");

                    b.Property<DateTime?>("Delete_Date");

                    b.Property<bool>("Is_Deleted");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("Update_Date");

                    b.HasKey("Id");

                    b.ToTable("TB_M_Type_Asset");
                });

            modelBuilder.Entity("Data.Models.Account", b =>
                {
                    b.HasOne("Data.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Data.Models.AccountRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("Data.Models.Asset", b =>
                {
                    b.HasOne("Data.Models.TypeAsset", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");
                });

            modelBuilder.Entity("Data.Models.AssetLend", b =>
                {
                    b.HasOne("Data.Models.Asset", "Asset")
                        .WithMany()
                        .HasForeignKey("AssetId");

                    b.HasOne("Data.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Data.Models.Employee", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId");

                    b.HasOne("Data.Models.StatusApproval", "Manager_Status")
                        .WithMany()
                        .HasForeignKey("Manager_StatusId");

                    b.HasOne("Data.Models.StatusApproval", "Procurement_Status")
                        .WithMany()
                        .HasForeignKey("Procurement_StatusId");
                });

            modelBuilder.Entity("Data.Models.AssetReturn", b =>
                {
                    b.HasOne("Data.Models.AssetLend", "AssetLend")
                        .WithMany()
                        .HasForeignKey("AssetLendId");
                });

            modelBuilder.Entity("Data.Models.DamageAsset", b =>
                {
                    b.HasOne("Data.Models.AssetLend", "AssetLend")
                        .WithMany()
                        .HasForeignKey("AssetLendId");
                });

            modelBuilder.Entity("Data.Models.DamageClassification", b =>
                {
                    b.HasOne("Data.Models.DamageType", "DamageType")
                        .WithMany()
                        .HasForeignKey("DamageTypeId");
                });

            modelBuilder.Entity("Data.Models.DamageHistory", b =>
                {
                    b.HasOne("Data.Models.DamageAsset", "DamageAsset")
                        .WithMany()
                        .HasForeignKey("DamageAssetId");

                    b.HasOne("Data.Models.DamageClassification", "DamageClassification")
                        .WithMany()
                        .HasForeignKey("DamageClassificationId");
                });

            modelBuilder.Entity("Data.Models.EmployeeDetails", b =>
                {
                    b.HasOne("Data.Models.Employee", "Bod")
                        .WithMany()
                        .HasForeignKey("BodId");

                    b.HasOne("Data.Models.EmployeeDepartment", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Data.Models.Employee", "Division_Head")
                        .WithMany()
                        .HasForeignKey("Division_HeadId");

                    b.HasOne("Data.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Data.Models.Employee", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId");

                    b.HasOne("Data.Models.EmployeePosition", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId");
                });

            modelBuilder.Entity("Data.Models.NotebookRequest", b =>
                {
                    b.HasOne("Data.Models.Employee", "BodId")
                        .WithMany()
                        .HasForeignKey("BodIdId");

                    b.HasOne("Data.Models.StatusApproval", "Bod_Status")
                        .WithMany()
                        .HasForeignKey("Bod_StatusId");

                    b.HasOne("Data.Models.StatusApproval", "Divisio_Head_Status")
                        .WithMany()
                        .HasForeignKey("Divisio_Head_StatusId");

                    b.HasOne("Data.Models.Employee", "Division_HeadId")
                        .WithMany()
                        .HasForeignKey("Division_HeadIdId");

                    b.HasOne("Data.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Data.Models.Employee", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId");

                    b.HasOne("Data.Models.StatusApproval", "Manager_Status")
                        .WithMany()
                        .HasForeignKey("Manager_StatusId");
                });
#pragma warning restore 612, 618
        }
    }
}
